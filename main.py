import os
import time
import ccxt
import requests
from flask import Flask, request
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC
exchange = ccxt.mexc({
    'apiKey': API_KEY,
    'secret': API_SECRET,
    'enableRateLimit': True
})

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
is_searching = {}
last_start_time = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
MIN_VOLUME_USDT = 10_000
MAX_VOLUME_USDT = 1_000_000
MIN_SPREAD_PERCENT = 0.5

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"[Telegram] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–Ω–µ—Ç–∞–º
def scan_spread_opportunities(limit=10):
    result = []
    try:
        markets = exchange.load_markets()
    except Exception as e:
        print(f"[MEXC] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–∫–æ–≤: {e}")
        return result

    for symbol in markets:
        if not symbol.endswith("/USDT"):
            continue

        try:
            orderbook = exchange.fetch_order_book(symbol)
            ticker = exchange.fetch_ticker(symbol)
        except Exception:
            continue

        if not orderbook['bids'] or not orderbook['asks']:
            continue

        best_bid = orderbook['bids'][0][0]
        best_ask = orderbook['asks'][0][0]
        mid_price = (best_bid + best_ask) / 2
        spread = (best_ask - best_bid) / mid_price * 100
        volume = ticker.get('quoteVolume', 0)

        if (
            spread >= MIN_SPREAD_PERCENT and
            MIN_VOLUME_USDT <= volume <= MAX_VOLUME_USDT
        ):
            result.append(f"{symbol} | Spread: {spread:.2f}% | Volume: {volume:.0f}")
            if len(result) >= limit:
                break
    return result

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook', methods=["POST"])
def webhook():
    data = request.get_json()

    if "message" not in data:
        return "ok"

    message = data["message"]
    chat_id = message["chat"]["id"]
    text = message.get("text", "")
    user_id = str(chat_id)

    print(f"[Telegram] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –æ—Ç {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    if text == "/start":
        now = time.time()

        if is_searching.get(user_id, False):
            send_message(chat_id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∏—Å–∫ —É–∂–µ –∏–¥—ë—Ç...")
            return "ok"

        if user_id in last_start_time and now - last_start_time[user_id] < 120:
            send_message(chat_id, "‚ùó –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.")
            return "ok"

        is_searching[user_id] = True
        last_start_time[user_id] = now
        send_message(chat_id, "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –º–æ–Ω–µ—Ç...")

        results = scan_spread_opportunities()

        if results:
            for line in results:
                send_message(chat_id, line)
        else:
            send_message(chat_id, "üòî –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        is_searching[user_id] = False
        return "ok"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ /stop
    if text == "/stop":
        if is_searching.get(user_id, False):
            is_searching[user_id] = False
            send_message(chat_id, "‚õî –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            send_message(chat_id, "üö´ –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏—â—É.")
        return "ok"

    return "ok"

# –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    app.run(port=8000)
